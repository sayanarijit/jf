.\" Text automatically generated by txt2man
.TH jf  "1" "" ""
.SH USAGE

jf TEMPLATE [VALUE]\.\.\. [NAME=VALUE]\.\.\.
.PP
Where TEMPLATE may contain the following placeholders:
.TP
.B
`%q`
for quoted and safely escaped JSON string.
.TP
.B
`%s`
for JSON values other than string.
.TP
.B
`%v`
for the `jf` version number.
.TP
.B
`%%`
for a literal `%` character.
.PP
And [VALUE]\.\.\. [NAME=VALUE]\.\.\. are the values for the placeholders.
.SH SYNTAX

.TP
.B
`%s`, `%q`
for posiitonal placeholders.
.TP
.B
`%(NAME)s`, `%(NAME)q`
for named placeholders.
`%(NAME=DEFAULT)s`, `%(NAME=DEFAULT)q` for placeholders with default values.
.TP
.B
`%?(NAME)s`, `%?(NAME)q`
for placeholders with optional values.
.TP
.B
`%*s`, `%*q`
for variable number of array items.
.TP
.B
`%**s`, `%**q`
for variable number of key value pairs.
.SH RULES

.IP \(bu 3
Pass values for positional placeholders in the same order as in the template.
.IP \(bu 3
Pass values for named placeholders using `NAME=VALUE` syntax.
.IP \(bu 3
Optional placeholders default to empty string, which is considered as null.
.IP \(bu 3
Do not declare or pass positional placeholders or values after named ones.
.IP \(bu 3
Nesting placeholders is prohibited.
.IP \(bu 3
Variable length placeholder should be the last placeholder in a template.
.SH EXAMPLES

jf %s 1
.SS  # 1

jf %q 1
.SS  # "1"

jf [%*s] 1 2 3
.SS  # [1,2,3]

jf {%**q} one 1 two 2 three 3
# {"one":"1","two":"2","three":"3"}
.PP
jf "%q: %(value=default)q" foo value=bar
# {"foo":"bar"}
.PP
jf "{str_or_bool: %?(str)q %?(bool)s, optional: %?(optional)q}" str=true
# {"str_or_bool":"true","optional":null}
.PP
jf '{1: %s, two: %q, 3: %(3)s, four: %(four=4)q, "%%": %(pct)q}' 1 2 3=3 pct=100%
# {"1":1,"two":"2","3":3,"four":"4","%":"100%"}
